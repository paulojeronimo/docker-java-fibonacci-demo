#!/usr/bin/env bash
set -eou pipefail

artifactId=${artifactId:-docker-java-fibonacci-demo}
version=${version:-$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)}
target=${target:-target}

cd "$(dirname "$0")"

declare -A options=(
  [docker_build]="--build-arg JAR_NAME=$artifactId \
    --build-arg JAR_VERSION=$version -t $artifactId .
  build a docker image named '$artifactId'"

  [docker_run]="--rm $artifactId
  run a docker container from image '$artifactId'"

  [docker_rmi]="$artifactId
  remove the generated docker image ($artifactId)"
)

docker_build() {
  local args=( "$@" )
  local n=${#args[@]}
  [ "${args[-1]}" = Dockerfile.maven ] &&
    docker build -f Dockerfile.maven "${args[@]:0:n-1}" ||
    {
      [ -f $target/$artifactId-$version.jar ] || mvn package
      docker build "${args[@]}"
    }
}

f_arr=( "$@" )
[ $# = 0 ] && option=none || { option="$@"; option=${option// /_}; }

for key in ${!options[@]}
do
  if [ "$option" ] && [[ $option =~ $key ]]
  then
    n=$(IFS=_ read -a arr <<< "$key"; echo ${#arr[@]})
    cf_args=$(sed -n 1p <<< "${options[$key]}")
    cmd="${f_arr[@]:0:n}"
    if ! [ "$(type -t $key)" = function ]
    then
      echo $cmd $cf_args "${f_arr[@]:n}"
      $cmd $cf_args "${f_arr[@]:n}"
    else
      $key $cf_args "${f_arr[@]:n}"
    fi
    exit $?
  fi
done

echo You need to pass some arguments! Examples:
for option in "${!options[@]}"
do
  printf "%-25s" "$0 ${option//_/ }"
  echo '# <- ' $(sed -n 2p <<< "${options[$option]}")
done
